---
import RenderCode from "./RenderCode.astro"
import RenderPoetry from "./RenderPoetry.astro"
interface Props {
  data: any
}

const { data } = Astro.props
---
<>
  {data.map(field => (
    <>
      {field.type === 'paragraph' && (
        <p id={field.id} class="my-4 text-large" set:html={field.data.text} />)}
        {field.type === 'image' && (
        <img id={field.id} class="my-4" src={field.data.file} alt={field.data.caption} />)
      }
      {field.type === 'header' && (
        <>
          {field.data.level === 1 && (
            <h1 id={field.id} class="tracking-wide text-4xl my-6" set:html={field.data.text}/>
          )}
          {field.data.level === 2 && (
            <h2 id={field.id} class="tracking-wide text-3xl my-5" set:html={field.data.text}/>
          )}
          {field.data.level === 3 && (
            <h3 id={field.id} class="tracking-wide text-2xl my-4" set:html={field.data.text}/>
          )}
          {field.data.level === 4 && (
            <h4 id={field.id} class="tracking-wide text-l my-3" set:html={field.data.text}/>
          )}
          {field.data.level === 5 && (
            <h5 id={field.id} class="tracking-wide my-2" set:html={field.data.text}/>
          )}
          {field.data.level === 6 && (
            <h6 id={field.id} class="tracking-wide my-2" set:html={field.data.text}/>
          )}
        </>
      )}
      {field.type === 'list' && (
        <>
          {field.data.style === 'unordered' && (
            <ul id={field.id} class="list-disc ml-4 text-large">
              {field.data.items.map(item => (
                <li set:html={item} />
              ))}
            </ul>
          )}
          {field.data.style === 'ordered' && (
            <ol id={field.id} class="list-decimal ml-4 text-large">
              {field.data.items.map(item => (
                <li class="my-1" set:html={item} />
              ))}
            </ol>
          )}
        </>
      )}
      {field.type === 'code' && (
        <RenderCode code={field.data.code} />
      )}
      {field.type === 'poetry' && (
        <RenderPoetry poetry={field.data.poetry} />
      )}
    </>
  ))}
</>

<style is:global>
  p.text-large > a {
    text-decoration: underline;
    text-decoration-skip-ink: auto;
  }
  img {
    width: 100%;
  }
  a {
    word-wrap: break-word;
  }
</style>
